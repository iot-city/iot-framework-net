# The network configuration template file is used to configure the net framework information.
# The default external file to load: "framework-net-kafka.properties".
# For: org.iotcity.iot.framework.net.NetConfigure
# See: http://www.iot-city.org

# Define network configuration identifiers (the property key must be "iot.framework.net.kafka.channels").
iot.framework.net.kafka.channels=channel.demo1, channel.demo2

# ===============================================================================
# ======================= The channel basic configuration =======================
# ===============================================================================

# THE CHANNEL CONFIGURATION.
channel.demo1=true
# The channel unique identification (required, can not be null or empty).
channel.demo1.channelID=DEMO1-CLIENT
# Indicates whether the current channel is enabled (true by default).
channel.demo1.enabled=true
# The channel instance class (required, can not be null).
# The variable channel classes in the framework:
# org.iotcity.iot.framework.net.kafka.channels.NetKafkaBytesChannel
# org.iotcity.iot.framework.net.kafka.channels.NetKafkaStringBytesChannel
# org.iotcity.iot.framework.net.kafka.channels.NetKafkaStringChannel
channel.demo1.instance=org.iotcity.iot.framework.net.kafka.channels.NetKafkaBytesChannel

# ======================= The channel options configuration =======================

# The network channel configuration options data (optional).
channel.demo1.options=true

# THE CHANNEL INBOUNDS CONFIGURATION.
# # Define the inbound configurations by using property keys.
channel.demo1.options.inbounds=bytes, stringbytes, string
# The service inbound instance class (required, can not be null).
channel.demo1.options.inbounds.bytes.instance=org.iotcity.iot.framework.net.kafka.support.actor.io.NetKafkaActorBytesInbound
# The service inbound message processing priority (the priority with the highest value is called first, 0 by default).
channel.demo1.options.inbounds.bytes.priority=2
# The service inbound instance class (required, can not be null).
channel.demo1.options.inbounds.stringbytes.instance=org.iotcity.iot.framework.net.kafka.support.actor.io.NetKafkaActorStringBytesInbound
# The service inbound message processing priority (the priority with the highest value is called first, 0 by default).
channel.demo1.options.inbounds.stringbytes.priority=1
# The service inbound instance class (required, can not be null).
channel.demo1.options.inbounds.string.instance=org.iotcity.iot.framework.net.kafka.support.actor.io.NetKafkaActorStringInbound
# The service inbound message processing priority (the priority with the highest value is called first, 0 by default).
channel.demo1.options.inbounds.string.priority=0

# THE CHANNEL OUTBOUNDS CONFIGURATION.
# Define the outbound configurations by using property keys.
channel.demo1.options.outbounds=bytes, stringbytes, string
# The service outbound instance class (required, can not be null).
channel.demo1.options.outbounds.bytes.instance=org.iotcity.iot.framework.net.kafka.support.actor.io.NetKafkaActorBytesOutbound
# The service outbound message processing priority (the priority with the highest value is called first, 0 by default).
channel.demo1.options.outbounds.bytes.priority=2
# The service outbound instance class (required, can not be null).
channel.demo1.options.outbounds.stringbytes.instance=org.iotcity.iot.framework.net.kafka.support.actor.io.NetKafkaActorStringBytesOutbound
# The service outbound message processing priority (the priority with the highest value is called first, 0 by default).
channel.demo1.options.outbounds.stringbytes.priority=1
# The service outbound instance class (required, can not be null).
channel.demo1.options.outbounds.string.instance=org.iotcity.iot.framework.net.kafka.support.actor.io.NetKafkaActorStringOutbound
# The service outbound message processing priority (the priority with the highest value is called first, 0 by default).
channel.demo1.options.outbounds.string.priority=0

# THE CHANNEL ADDITIONAL CONFIGURATION.
# Indicates whether to use multithreading to process request and response data when allowed (false by default).
channel.demo1.options.multithreading=true
# The thread execution priority of channel data processing (0 by default, the higher the value, the higher the priority, the higher value will be executed first).
channel.demo1.options.multithreadingPriority=0
# The default timeout value in milliseconds that waiting for a response data callback (120000 ms by default).
channel.demo1.options.defaultCallbackTimeout=120000
# If no data is received within the specified idle time in milliseconds, the channel will be closed (0 by default, when it is set to 0, this option is disabled).
channel.demo1.options.receivingIdleTimeout=0
# If no data is sent within the specified idle time in milliseconds, the channel will be closed (0 by default, when it is set to 0, this option is disabled).
channel.demo1.options.sendingIdleTimeout=0
# Indicates whether reopen the client channel after channel closing (false by default).
channel.demo1.options.reopenOnClosed=true
# The delayed time in milliseconds for automatically reopen the client channel after channel closing (5000 ms by default, the value must be greater than 0).
channel.demo1.options.reopenOnClosedDelay=5000

# ======================= The channel consumer configuration =======================

# The kafka consumer configuration data (the consumer configuration or the producer configuration can not be null).
channel.demo1.consumer=true

# Subscribe to the specified topics to get dynamically assigned partitions (if set it to empty elements, it will use the patterns field to subscribe to).
# Only one of the three configurations can be used with the following priorities:
# 1. topics > 2. pattern > 3. partitions.
channel.demo1.consumer.topics=APP-REQ-DEOM1
# Subscribe to all topics matching specified pattern regex string to get dynamically assigned partitions (if set it to empty elements, it will use the partitions field to subscribe to).
channel.demo1.consumer.pattern=
# Subscribe to the specified topics and partitions.
channel.demo1.consumer.partitions=test1, test2
# The kafka topic name of consumer.
channel.demo1.consumer.partitions.test1.topic=APP-REQ-DEOM1
# The kafka partition id array of current topic (e.g. partitions=0, 1, 3, if set it to null or an array with empty value, it will subscribe to all partitions for current topic).
channel.demo1.consumer.partitions.test1.partitions=0, 1
# The kafka topic name of consumer.
channel.demo1.consumer.partitions.test2.topic=APP-REQ-DEOM2
# The kafka partition id array of current topic (e.g. partitions=0, 1, 3, if set it to null or an array with empty value, it will subscribe to all partitions for current topic).
channel.demo1.consumer.partitions.test2.partitions=

# The timeout value in milliseconds, spent waiting in poll if data is not available in the buffer (200 by default).
channel.demo1.consumer.pollTimeout=500
# The maximum time in milliseconds to wait for consumer to close gracefully (30000 by default).
channel.demo1.consumer.closeTimeout=30000
# The consumer config map (required, can not be null).
# Valid configuration strings are documented here: 
# http://kafka.apache.org/documentation.html#consumerconfigs
channel.demo1.consumer.props=consumer.props.*

# A list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
# host1:port1, host2:port2, ...
consumer.props.bootstrap.servers=183.3.129.44:31053
# A unique string that identifies the consumer group this consumer belongs to.
consumer.props.group.id=DEMO1-REQ-GROUP
# If true the consumer's offset will be periodically committed in the background (false by default).
consumer.props.enable.auto.commit=false
# The frequency in milliseconds that the consumer offsets are auto-committed to Kafka.
consumer.props.auto.commit.interval.ms=5000
# What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server.
# earliest: automatically reset the offset to the earliest offset
# latest: automatically reset the offset to the latest offset
# none: throw exception to the consumer if no previous offset is found for the consumer's group
# anything else: throw exception to the consumer.
consumer.props.auto.offset.reset=latest
# The timeout used to detect client failures when using Kafka's group management facility.
consumer.props.session.timeout.ms=30000
# Deserializer class for key that implements the <code>org.apache.kafka.common.serialization.Deserializer</code> interface.
# org.apache.kafka.common.serialization.ByteArrayDeserializer
# org.apache.kafka.common.serialization.StringDeserializer
consumer.props.key.deserializer=org.apache.kafka.common.serialization.ByteArrayDeserializer
# Deserializer class for value that implements the <code>org.apache.kafka.common.serialization.Deserializer</code> interface.
consumer.props.value.deserializer=org.apache.kafka.common.serialization.ByteArrayDeserializer
# Other consumer properties fields...
# ...


# ======================= The channel producer configuration =======================

# The kafka producer configuration data (the consumer configuration or the producer configuration can not be null).
channel.demo1.producer=true
# The producer callback consumer configuration (optional, set it to false if not required).
channel.demo1.producer.callback=false
# Subscribe to the topic name to get callback data (required, can not be null or empty).
channel.demo1.producer.callback.topic=APP-RES-DEOM1
# Subscribe to the partition of the topic name (required).
channel.demo1.producer.callback.partition=0
# The timeout value in milliseconds, spent waiting in poll if data is not available in the buffer (200 by default).
channel.demo1.producer.callback.pollTimeout=500
# The maximum time in milliseconds to wait for consumer to close gracefully (30000 by default).
channel.demo1.producer.callback.closeTimeout=30000
# The consumer config map (required, can not be null).
# Valid configuration strings are documented here: 
# http://kafka.apache.org/documentation.html#consumerconfigs
channel.demo1.producer.callback.props=producer.callback.*

# A list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
# host1:port1, host2:port2, ...
producer.callback.bootstrap.servers=183.3.129.44:31053
# A unique string that identifies the consumer group this consumer belongs to.
producer.callback.group.id=DEMO1-RES-GROUP
# Deserializer class for key that implements the <code>org.apache.kafka.common.serialization.Deserializer</code> interface.
# org.apache.kafka.common.serialization.ByteArrayDeserializer
# org.apache.kafka.common.serialization.StringDeserializer
producer.callback.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
# Deserializer class for value that implements the <code>org.apache.kafka.common.serialization.Deserializer</code> interface.
producer.callback.value.deserializer=org.apache.kafka.common.serialization.ByteArrayDeserializer
# Other consumer properties fields...
# ...

# ======================= The channel producer properties =======================

# The producer config map (required, can not be null).
# Valid configuration strings are documented here:
# http://kafka.apache.org/documentation.html#producerconfigs
channel.demo1.producer.props=producer.props.*

# A list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
# host1:port1, host2:port2, ...
producer.props.bootstrap.servers=183.3.129.44:31053
# The compression type for all data generated by the producer, the default is none (i.e. no compression). 
# Valid values are: none, gzip, snappy, lz4, zstd.
producer.props.compression.type=gzip
# Serializer class for key that implements the <code>org.apache.kafka.common.serialization.Serializer</code> interface.
# org.apache.kafka.common.serialization.ByteArraySerializer
# org.apache.kafka.common.serialization.StringSerializer
producer.props.key.serializer=org.apache.kafka.common.serialization.ByteArraySerializer
# Serializer class for value that implements the <code>org.apache.kafka.common.serialization.Serializer</code> interface.
producer.props.value.serializer=org.apache.kafka.common.serialization.ByteArraySerializer
# Other producer properties fields...
# ...



# ===============================================================================
# ======================= The channel basic configuration =======================
# ===============================================================================

# THE CHANNEL CONFIGURATION.
channel.demo2=false
# ...





